/*- MBRLIST, a Rexx proc to list the member names in a PDS
    The results are written to a dataset MEMBER.LIST
    Can be called with with a stack (FIFO/LIFO) parameter
    which causes the result to be placed in the program stack
    instead.
    (c) 2000-02-24 - Adrian Stern - ADST001 at MVSF
     -*/
TRACE ("Normal")
Address "TSO"
ExecName ="MBRLIST"
True     = 1
False    = 0

arg Arguments
parse value Arguments with InputDataset MemberPattern "(" Option
Option        = strip(Option)
MemberPattern = strip(MemberPattern)

/* allocate dataset with directory attributes */
"ALLOCATE FILE(INPUT) DSN("InputDataset") SHR REUSE",
"DSORG(PS) RECFM(F) BLKSIZE(256) LRECL(256)"
/* read the directory */
MemberCount  = 0
MemberStack. =""
Do forever
    Execio 1 diskr input
    if Rc<>0 then leave

    parse pull line
    Call HandleLine
    if Result>1 then leave
End
Call Exit ( 0 )
/*------------------------------( end )-------------------------------*/
HandleLine:
block = c2x(substr(line,1,2))            /* get block length (hex)    */
block = x2d(block)                       /* make it decimal           */
line = substr(line,3)                    /* drop block length         */
block = block - 2                        /* decrease remaining block  */
Do forever
    Call ExamineBlocks
    if Result <> 0 then leave
End
Return ( Result )
/*------------------------------( end )-------------------------------*/
ExamineBlocks:
/* test for end of block */
if block < 1 then Return ( 1 )

MemberName = substr(line,1,8)           /* pick off member MemberName */
/* test for last entry mark   */
if MemberName = 'FFFFFFFFFFFFFFFF'x then Return ( 4 )

MemberCount            = MemberCount + 1
MemberStack.0          = MemberCount
MemberStack.MemberCount= strip(MemberName)

line  = substr(line,12)                 /* drop name and ttr         */
block = block - 11                      /* decrease remaining block  */
len   = c2x(substr(line,1,1))           /* get user data length (hex)*/
len   = x2d(len) // 32 + 1              /* make it decimal           */
len   = len * 2                         /* allow for half word count */
line  = substr(line,len)                /* and drop user data        */
block = block - len + 1                 /* decrease remaining block  */
Return ( 0 )
/*----------------------------( end )--------------------------------*/
Exit:
Arg  Return_code
Execio 0 diskr input "(finis"
"FREE     FILE(INPUT)"
if   Return_code<>0 then Exit Return_code

if MemberCount < 1
then
    Do
/* ISRU212 The PDS specified contains no members.  */
        eMsg="The PDS specified contains no members."
        if Option = "" then say   eMsg
                       else queue eMsg
        Exit ( 8 )
    End
/* now try and match the pattern argument */
Select
    when         MemberPattern ="*" then nop
    when         MemberPattern =" " then nop
    when         MemberPattern =""  then nop
    when Pos("%",MemberPattern)>0   then Call ListFromMember
    otherwise                            Call MatchMemberPattern
End

if MemberCount < 1
then
    Do
/* ISRM018 The specified pattern produced no matching members.  */
        eMsg="The specified pattern produced no matching members."
        if Option = "" then say   eMsg
                       else queue eMsg
        Exit ( 8 )
    End

Select
    when Option = ""
    then Call WriteToDataset
    when Option = "STACK",
    |    Option = "FIFO"
    then
        Do i=1 to MemberStack.0
            queue MemberStack.i
        End
    when Option = "LIFO"
    then
        Do i=1 to MemberStack.0
            push  MemberStack.i
        End
    otherwise nop
End

Exit Return_code
/*------------------------------( end )-------------------------------*/
WriteToDataset:
x=msg("Off")
"DELETE"                     MEMBER.LIST
x=msg("On" )
"ALLOCATE FILE($MEMBER$) DSN(MEMBER.LIST) NEW REUSE"
Execio MemberStack.0 "DISKW $MEMBER$ (FINIS STEM MemberStack."
"FREE     FILE($MEMBER$)"
say MemberStack.0 "Member names written to dataset '",
|| userid()".MEMBER.LIST'."
Return
/*------------------------------( end )-------------------------------*/
ListFromMember:
SearchPattern=substr(MemberPattern,1,Pos("%",MemberPattern)-1)
/* extract the members that match */
TempStack.   =""
j            =0
Do i=1 to MemberStack.0

    if     MemberStack.i >= SearchPattern
    then
        Do
                      j = j+1
            TempStack.0 = j
            TempStack.j = MemberStack.i
        End
End
Call CopyStack
Return
/*------------------------------( end )-------------------------------*/
MatchMemberPattern:
/* determine position of asterisks */
PreAsterix =False
if     pos("*",MemberPattern) = 1
then PreAsterix =True

PostAsterix=False
if lastpos("*",MemberPattern) = length(MemberPattern)
then PostAsterix=True

SearchPattern=strip(MemberPattern,Both,"*")
/* create dynamic code */
Select
    when  PostAsterix,
    &     PreAsterix  then PosRequired= ">0"
    when ¬PostAsterix,
    &    ¬PreAsterix  then PosRequired= "=1"
    when  PostAsterix then PosRequired= "=1"
    when  PreAsterix  then PosRequired= "=(length(MemberStack.i)-",
                                          "length(SearchPattern))+1"
    otherwise nop
End
/* say 'SearchPattern' SearchPattern , */
/*    'PosRequired' PosRequired */
/* extract the members that match */
TempStack.   =""
j            =0
Do i=1 to MemberStack.0
    PatternMatched=False
/*  don't even bother to examine member names
    shorter than the pattern entered */
    if length(MemberStack.i)<length(SearchPattern) then iterate

/*  sorry, but dynamic code is the only solution */
    DynaCode="if pos(SearchPattern,MemberStack.i)",
    PosRequired "then PatternMatched=True"
    interpret DynaCode
    if   PatternMatched
    then
        Do
                      j = j+1
            TempStack.0 = j
            TempStack.j = MemberStack.i
        End
End
Call CopyStack
Return
/*------------------------------( end )-------------------------------*/
CopyStack:
/* overwrite the original stack
   but don't bother if no matches found */
   MemberCount = TempStack.0
if MemberCount < 1 then Return

/* ok, now overwrite the original stack */
MemberStack.=""
j           =0
Do i=1 to TempStack.0
                j = j+1
    MemberStack.0 = j
    MemberStack.j = TempStack.i
End
Return
